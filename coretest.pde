boolean isRotating = false;
boolean isRotatingX = false;
boolean isRotatingY = false;
boolean isRotatingZ = true;
boolean alternateColors = false;
float incx = 0.;
float incy = 0.;
float incz = 0.;
float middlex;
float middley;
float middlez;
float rotX = 0.;
float rotY = 0.;
float rotZ = 0.;
void setup() {
	size(800, 600, OPENGL);
	fill(184, 235, 184);
}
void drawCircle(float _x, float _y, float _radius, float _z) {
_radius = _radius / 2;
noFill();
bezier(0 + _x, _radius/2 + _y, _z, 0 + _x, _radius/2 +_y, _z, 0+_x, 0+_y, _z, _radius/2+_x, 0+_y, _z);
bezier(_radius/2 + _x, 0 + _y, _z, _radius/2 + _x, 0 + _y, _z, _radius + _x, 0 + _y, _z, _radius + _x, _radius/2 + _y, _z);
bezier(_radius + _x, _radius/2 + _y, _z, _radius + _x, _radius/2 + _y, _z, _radius + _x, _radius + _y, _z, _radius/2 + _x, _radius + _y, _z);
bezier(_radius/2 + _x, _radius + _y, _z, _radius/2 + _x, _radius + _y, _z, 0 + _x, _radius + _y, _z, 0 + _x, _radius/2 + _y, _z);
}

void draw() {
	lights();
	if (alternateColors) {
		background(120);
	} else {
		background(255);
	}
	camera(0.0, middlez, 220.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
	if (mousePressed) {
	// do nothing
	} else {
	rotY = (PI*2)*((mouseX/(float)width)+incx);
	rotX = (PI*2)*((mouseY/(float)height)+incy);
	rotZ = (PI*2)*incz;
	}
	translate(middlex, middley, 0.);
	rotateX(rotX);
	rotateY(rotY);
	rotateZ(rotZ);
	translate(-middlex, -middley, -0.);
	
	if (isRotating) {
	if (isRotatingX) { incx += 0.0003; };
		if (incx >= 1.0) {
			incx = 0.;
		}
	if (isRotatingY) { incy += 0.0001; };
		if (incy >= 1.0) {
			incy = 0.;
		}
	if (isRotatingZ) { incz += 0.00045; };
		if (incz >= 1.0) {
			incz = 0.;
		}
	}
	if (alternateColors) {
		stroke(120, 0, 0);
	} else {
		stroke(40, 120, 40);
	}
	line(0, 0, 0, 100, 0, 0);
	line(0, 0, 0, 0, 100, 0);
	line(0, 0, 0, 0, 0, 100);
	if (alternateColors) {
		stroke(0);
	} else {
		stroke(0);
	}
line(0.000000000000, 0.000000000000, 0.000000000000, 10.000000000000, 10.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(10.000000000000, 10.000000000000, 30.000000000000, 10.000000000000, 10.000000000000, 0.000000000000);
line(10.000000000000, 10.000000000000, 30.000000000000, 10.000000000000, 0.000000000000, 30.000000000000);
line(10.000000000000, 0.000000000000, 0.000000000000, 10.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(10.000000000000, 0.000000000000, 0.000000000000, -10.000000000000, 5.000000000000, 0.000000000000);
line(-10.000000000000, 5.000000000000, 0.000000000000, 20.000000000000, 20.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(20.000000000000, 20.000000000000, 30.000000000000, 20.000000000000, 20.000000000000, 0.000000000000);
line(20.000000000000, 20.000000000000, 30.000000000000, 20.000000000000, 0.000000000000, 30.000000000000);
line(20.000000000000, 0.000000000000, 0.000000000000, 20.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(20.000000000000, 0.000000000000, 0.000000000000, -20.000000000000, 10.000000000000, 0.000000000000);
line(-20.000000000000, 10.000000000000, 0.000000000000, 30.000000000000, 30.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(30.000000000000, 30.000000000000, 30.000000000000, 30.000000000000, 30.000000000000, 0.000000000000);
line(30.000000000000, 30.000000000000, 30.000000000000, 30.000000000000, 0.000000000000, 30.000000000000);
line(30.000000000000, 0.000000000000, 0.000000000000, 30.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(30.000000000000, 0.000000000000, 0.000000000000, -30.000000000000, 15.000000000000, 0.000000000000);
line(-30.000000000000, 15.000000000000, 0.000000000000, 40.000000000000, 40.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(40.000000000000, 40.000000000000, 30.000000000000, 40.000000000000, 40.000000000000, 0.000000000000);
line(40.000000000000, 40.000000000000, 30.000000000000, 40.000000000000, 0.000000000000, 30.000000000000);
line(40.000000000000, 0.000000000000, 0.000000000000, 40.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(40.000000000000, 0.000000000000, 0.000000000000, -40.000000000000, 20.000000000000, 0.000000000000);
line(-40.000000000000, 20.000000000000, 0.000000000000, 50.000000000000, 50.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(50.000000000000, 50.000000000000, 30.000000000000, 50.000000000000, 50.000000000000, 0.000000000000);
line(50.000000000000, 50.000000000000, 30.000000000000, 50.000000000000, 0.000000000000, 30.000000000000);
line(50.000000000000, 0.000000000000, 0.000000000000, 50.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(50.000000000000, 0.000000000000, 0.000000000000, -50.000000000000, 25.000000000000, 0.000000000000);
line(-50.000000000000, 25.000000000000, 0.000000000000, 60.000000000000, 60.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(60.000000000000, 60.000000000000, 30.000000000000, 60.000000000000, 60.000000000000, 0.000000000000);
line(60.000000000000, 60.000000000000, 30.000000000000, 60.000000000000, 0.000000000000, 30.000000000000);
line(60.000000000000, 0.000000000000, 0.000000000000, 60.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(60.000000000000, 0.000000000000, 0.000000000000, -60.000000000000, 30.000000000000, 0.000000000000);
line(-60.000000000000, 30.000000000000, 0.000000000000, 70.000000000000, 70.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(70.000000000000, 70.000000000000, 30.000000000000, 70.000000000000, 70.000000000000, 0.000000000000);
line(70.000000000000, 70.000000000000, 30.000000000000, 70.000000000000, 0.000000000000, 30.000000000000);
line(70.000000000000, 0.000000000000, 0.000000000000, 70.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(70.000000000000, 0.000000000000, 0.000000000000, -70.000000000000, 35.000000000000, 0.000000000000);
line(-70.000000000000, 35.000000000000, 0.000000000000, 80.000000000000, 80.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(80.000000000000, 80.000000000000, 30.000000000000, 80.000000000000, 80.000000000000, 0.000000000000);
line(80.000000000000, 80.000000000000, 30.000000000000, 80.000000000000, 0.000000000000, 30.000000000000);
line(80.000000000000, 0.000000000000, 0.000000000000, 80.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(80.000000000000, 0.000000000000, 0.000000000000, -80.000000000000, 40.000000000000, 0.000000000000);
line(-80.000000000000, 40.000000000000, 0.000000000000, 90.000000000000, 90.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(90.000000000000, 90.000000000000, 30.000000000000, 90.000000000000, 90.000000000000, 0.000000000000);
line(90.000000000000, 90.000000000000, 30.000000000000, 90.000000000000, 0.000000000000, 30.000000000000);
line(90.000000000000, 0.000000000000, 0.000000000000, 90.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(90.000000000000, 0.000000000000, 0.000000000000, -90.000000000000, 45.000000000000, 0.000000000000);
line(-90.000000000000, 45.000000000000, 0.000000000000, 100.000000000000, 100.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(100.000000000000, 100.000000000000, 30.000000000000, 100.000000000000, 100.000000000000, 0.000000000000);
line(100.000000000000, 100.000000000000, 30.000000000000, 100.000000000000, 0.000000000000, 30.000000000000);
line(100.000000000000, 0.000000000000, 0.000000000000, 100.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(100.000000000000, 0.000000000000, 0.000000000000, -100.000000000000, 50.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(-100.000000000000, 50.000000000000, 30.000000000000, -100.000000000000, 50.000000000000, 0.000000000000);
line(-100.000000000000, 50.000000000000, 30.000000000000, 0.000000000000, 0.000000000000, 30.000000000000);
line(0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(0.000000000000, 0.000000000000, 0.000000000000, 0.000000000000, -20.000000000000, 0.000000000000);
stroke(120, 120, 200);
line(0.000000000000, -20.000000000000, 30.000000000000, 0.000000000000, -20.000000000000, 0.000000000000);
line(0.000000000000, -20.000000000000, 30.000000000000, -0.000000000000, -10.000000000000, 30.000000000000);
line(-0.000000000000, -10.000000000000, 0.000000000000, -0.000000000000, -10.000000000000, 30.000000000000);
stroke(0, 0, 0);
line(-0.000000000000, -10.000000000000, 0.000000000000, 5.176380900000, -29.318516530000, 0.000000000000);
stroke(120, 120, 200);
line(5.176380900000, -29.318516530000, 30.000000000000, 5.176380900000, -29.318516530000, 0.000000000000);
line(5.176380900000, -29.318516530000, 30.000000000000, 2.588190450000, -19.659258270000, 30.000000000000);
line(2.588190450000, -19.659258270000, 0.000000000000, 2.588190450000, -19.659258270000, 30.000000000000);
stroke(0, 0, 0);
line(2.588190450000, -19.659258270000, 0.000000000000, 12.588190450000, -36.979766350000, 0.000000000000);
stroke(120, 120, 200);
line(12.588190450000, -36.979766350000, 30.000000000000, 12.588190450000, -36.979766350000, 0.000000000000);
line(12.588190450000, -36.979766350000, 30.000000000000, 7.588190450000, -28.319512310000, 30.000000000000);
line(7.588190450000, -28.319512310000, 0.000000000000, 7.588190450000, -28.319512310000, 30.000000000000);
stroke(0, 0, 0);
line(7.588190450000, -28.319512310000, 0.000000000000, 21.730326070000, -42.461647930000, 0.000000000000);
stroke(120, 120, 200);
line(21.730326070000, -42.461647930000, 30.000000000000, 21.730326070000, -42.461647930000, 0.000000000000);
line(21.730326070000, -42.461647930000, 30.000000000000, 14.659258260000, -35.390580120000, 30.000000000000);
line(14.659258260000, -35.390580120000, 0.000000000000, 14.659258260000, -35.390580120000, 30.000000000000);
stroke(0, 0, 0);
line(14.659258260000, -35.390580120000, 0.000000000000, 31.979766340000, -45.390580120000, 0.000000000000);
stroke(120, 120, 200);
line(31.979766340000, -45.390580120000, 30.000000000000, 31.979766340000, -45.390580120000, 0.000000000000);
line(31.979766340000, -45.390580120000, 30.000000000000, 23.319512300000, -40.390580120000, 30.000000000000);
line(23.319512300000, -40.390580120000, 0.000000000000, 23.319512300000, -40.390580120000, 30.000000000000);
stroke(0, 0, 0);
line(23.319512300000, -40.390580120000, 0.000000000000, 42.638028830000, -45.566961020000, 0.000000000000);
stroke(120, 120, 200);
line(42.638028830000, -45.566961020000, 30.000000000000, 42.638028830000, -45.566961020000, 0.000000000000);
line(42.638028830000, -45.566961020000, 30.000000000000, 32.978770570000, -42.978770570000, 30.000000000000);
line(32.978770570000, -42.978770570000, 0.000000000000, 32.978770570000, -42.978770570000, 30.000000000000);
stroke(0, 0, 0);
line(32.978770570000, -42.978770570000, 0.000000000000, 52.978770570000, -42.978770570000, 0.000000000000);
stroke(120, 120, 200);
line(52.978770570000, -42.978770570000, 30.000000000000, 52.978770570000, -42.978770570000, 0.000000000000);
line(52.978770570000, -42.978770570000, 30.000000000000, 42.978770570000, -42.978770570000, 30.000000000000);
line(42.978770570000, -42.978770570000, 0.000000000000, 42.978770570000, -42.978770570000, 30.000000000000);
stroke(0, 0, 0);
line(42.978770570000, -42.978770570000, 0.000000000000, 62.297287100000, -37.802389670000, 0.000000000000);
stroke(120, 120, 200);
line(62.297287100000, -37.802389670000, 30.000000000000, 62.297287100000, -37.802389670000, 0.000000000000);
line(62.297287100000, -37.802389670000, 30.000000000000, 52.638028840000, -40.390580120000, 30.000000000000);
line(52.638028840000, -40.390580120000, 0.000000000000, 52.638028840000, -40.390580120000, 30.000000000000);
stroke(0, 0, 0);
line(52.638028840000, -40.390580120000, 0.000000000000, 69.958536920000, -30.390580120000, 0.000000000000);
stroke(120, 120, 200);
line(69.958536920000, -30.390580120000, 30.000000000000, 69.958536920000, -30.390580120000, 0.000000000000);
line(69.958536920000, -30.390580120000, 30.000000000000, 61.298282880000, -35.390580120000, 30.000000000000);
line(61.298282880000, -35.390580120000, 0.000000000000, 61.298282880000, -35.390580120000, 30.000000000000);
stroke(0, 0, 0);
line(61.298282880000, -35.390580120000, 0.000000000000, 75.440418500000, -21.248444500000, 0.000000000000);
stroke(120, 120, 200);
line(75.440418500000, -21.248444500000, 30.000000000000, 75.440418500000, -21.248444500000, 0.000000000000);
line(75.440418500000, -21.248444500000, 30.000000000000, 68.369350690000, -28.319512310000, 30.000000000000);
line(68.369350690000, -28.319512310000, 0.000000000000, 68.369350690000, -28.319512310000, 30.000000000000);
stroke(0, 0, 0);
stroke(120, 120, 200);
line(68.369350690000, -28.319512310000, 30.000000000000, 68.369350690000, -28.319512310000, 0.000000000000);
	noStroke();
	if (alternateColors) {
		fill(180, 180, 180, 120);
	} else {
		fill(120, 120, 120, 180);
	}
	translate(0,0,-50);
	box(200,200,100);
	translate(0,0,50);
}
void mouseDragged() {
	middlex += mouseX - pmouseX;
	middley += mouseY - pmouseY;
}
void keyPressed() {
	if (keyCode == UP) {
		middlez += 15.0;
	}
	if (keyCode == DOWN) {
		middlez -= 15.0;
	}
	if (key == 'r' || key == 'R') {
		if (isRotating) {
			isRotating = false;
		} else {
			isRotating = true;
			if (!isRotatingX && !isRotatingY && !isRotatingZ) { isRotatingZ = true; }
		}
	}
	if (key == 'c' || key == 'C') {
		if (alternateColors) {
			alternateColors = false;
		} else {
			alternateColors = true;
		}
	}
	if (key == 'x' || key == 'X') {
		if (isRotatingX) {
			isRotatingX = false;
		} else {
			isRotatingX = true;
		}
	}
	if (key == 'y' || key == 'Y') {
		if (isRotatingY) {
			isRotatingY = false;
		} else {
			isRotatingY = true;
		}
	}
	if (key == 'z' || key == 'Z') {
		if (isRotatingZ) {
			isRotatingZ = false;
		} else {
			isRotatingZ = true;
		}
	}
}
